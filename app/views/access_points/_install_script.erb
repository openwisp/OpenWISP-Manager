#!/bin/sh
<%#
# This file is part of the OpenWISP Manager
#
# Copyright (C) 2012 OpenWISP.org
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#%>

PROGDIR=$(cd -P -- "$(dirname $0)" && pwd -P)

# Deploy new configuration
echo "Deploying new configuration"

# System
echo "Changing hostname"
echo "<%=h access_point.name %>" > /proc/sys/kernel/hostname

# Networking
echo "Applying network configuration"
# VPNs
<% access_point.l2vpn_clients.each do |v| -%>
echo "Creating tap <%=h v.tap.name %>"
openvpn --mktun --dev <%=h v.tap.name %> --dev-type tap
while [ -z "`grep <%=h v.tap.name %> /proc/net/dev`" ]; do
  sleep 1
  openvpn --mktun --dev <%=h v.tap.name %> --dev-type tap
done
<% end -%>

# Network
echo "Creating bridges"
uci -m import network -f $PROGDIR/uci/network.conf
# ----------- Openwrt boot-bug workaround
vconfig set_name_type DEV_PLUS_VID_NO_PAD
sleep 5
# ----------- Openwrt boot-bug workaround
<% access_point.bridges.each do |b| -%>
echo "Enabling bridge <%=h b.name %>"
ifup <%=h b.name %>
<% if b.addressing_mode == "static" -%>
# Waiting for an IP address before starting WiFi configuration:
# For instance if 802.1x is used the IP address to reach the RADIUS server
# could be configured here...
__timeout=10
while [ -z "$(ip address show dev br-<%=h b.name %> | grep <%=h b.ip %>)" -o $__timeout -le 0 ]; do
  echo "Waiting for an IP address for bridge <%=h b.name %>"
  sleep 1
  __timeout=`expr \( $__timeout - 1 \)`
  if [ $__timeout -le 0 ]; then
    echo "Timeout waiting for an IP address on bridge '<%=h b.name %>'!"
    break
  fi
done
<% end -%>
<% end -%>

# Wifi
echo "Applying wifi configuration"
uci -m import wireless -f $PROGDIR/uci/wireless.conf
echo "Enabling wifi"
<% access_point.radios.each do |r| -%>
wifi up <%= r.name %>
<% end -%>

# VPNs
echo "Applying l2 vpn(s) configuration"
<% if access_point.l2vpn_clients.length > 0 -%>
uci -m import openvpn -f $PROGDIR/uci/openvpn.conf
echo "Enabling l2 vpn(s)"
/etc/init.d/openvpn start
<% end -%>

# L2TCs
echo "Applying l2 tc configuration"
$PROGDIR/l2tc_script.sh start

# Cron Scripts
<% if (!access_point.access_point_template.nil? and access_point.access_point_template.custom_script_templates.length > 0) or access_point.custom_scripts.length > 0 -%>
mkdir -p  $PROGDIR/crontabs
rm $PROGDIR/crond.pid >/dev/null 2>&1

## Inherited from template
<% unless access_point.access_point_template.nil? -%>
    <% access_point.access_point_template.custom_script_templates.each do |c| -%>
echo "<%=c.cron_minute %> <%=c.cron_hour %> <%=c.cron_day %> <%=c.cron_month %> <%=c.cron_weekday %> $PROGDIR/cron_scripts/T_<%= c.name %>" >> $PROGDIR/crontabs/root
    <% end -%>
<% end -%>

## Owned by access point
<% access_point.custom_scripts.each do |c| -%>
echo "<%=c.cron_minute %> <%=c.cron_hour %> <%=c.cron_day %> <%=c.cron_month %> <%=c.cron_weekday %> $PROGDIR/cron_scripts/<%= c.name %>" >> $PROGDIR/crontabs/root
<% end -%>

# Add info to crontab
echo "Running Cron"
start-stop-daemon -m -p /var/run/openwisp_crond.pid -S -b -x crond -- -f -c $PROGDIR/crontabs/ -l 5
<% end -%>

echo "New configuration now active"
